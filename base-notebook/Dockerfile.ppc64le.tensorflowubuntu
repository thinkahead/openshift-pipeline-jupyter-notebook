# Copyright (c) IBM Corporation 2016 
# Distributed under the terms of the Modified BSD License.

# Ubuntu image 
#FROM ibmcom/powerai
FROM ppc64le/ubuntu:18.04

LABEL maintainer="Alexei Karve <karve@us.ibm.com>"
ARG NB_USER="madi"
ARG NB_UID="1000"
ARG NB_GID="100"

USER root

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get -y update && \
    apt-get purge --auto-remove openjdk* && \
    apt-get -y install openjdk-8-jdk wget ca-certificates libhdf4-0 iputils-ping gnupg git curl && \
    rm -rf /var/lib/apt/lists/*

# apt-get -y install openjdk-8-jdk wget ca-certificates libhdf4-0 iputils-ping gnupg git vim ssh sudo curl net-tools openssh-server && \

ENV HADOOP_VERSION=3.3.0
#ENV HADOOP_VERSION=3.1.4
ENV SPARK_VERSION=2.4.5
RUN curl -O https://archive.apache.org/dist/spark/spark-$SPARK_VERSION/spark-$SPARK_VERSION-bin-without-hadoop.tgz \
      && tar -xzf spark-$SPARK_VERSION-bin-without-hadoop.tgz \
      && mv spark-$SPARK_VERSION-bin-without-hadoop /opt/spark-$SPARK_VERSION \
      && rm spark-$SPARK_VERSION-bin-without-hadoop.tgz \
      && echo 'export SPARK_DIST_CLASSPATH=$(/opt/hadoop-$HADOOP_VERSION/bin/hadoop classpath)' > /opt/spark-$SPARK_VERSION/conf/spark-env.sh

ENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-ppc64el/ \
    HADOOP_URL=https://archive.apache.org/dist/hadoop/common/hadoop-$HADOOP_VERSION/hadoop-$HADOOP_VERSION.tar.gz \
    HADOOP_HOME=/opt/hadoop-$HADOOP_VERSION \
    HADOOP_CONF_DIR=/etc/hadoop \
    SPARK_HOME=/opt/spark-$SPARK_VERSION \
    MULTIHOMED_NETWORK=1 \
    CONDA_INSTALL_DIR=/opt/conda \
    PATH=$HADOOP_HOME/bin/:${CONDA_INSTALL_DIR}/bin/:$PATH

RUN curl -O https://dist.apache.org/repos/dist/release/hadoop/common/KEYS && \
    gpg --import KEYS && \
    set -x && \
    curl -fSL "$HADOOP_URL" -o /tmp/hadoop.tar.gz && \
    curl -fSL "$HADOOP_URL.asc" -o /tmp/hadoop.tar.gz.asc && \
    gpg --verify /tmp/hadoop.tar.gz.asc && \
    tar -xf /tmp/hadoop.tar.gz -C /opt/ && \
    rm /tmp/hadoop.tar.gz* && \
    ln -s /opt/hadoop-$HADOOP_VERSION/etc/hadoop /etc/hadoop

#RUN curl -fSL "$HADOOP_URL" -o /tmp/hadoop.tar.gz && \
#    tar -xf /tmp/hadoop.tar.gz -C /opt/ && \
#    rm /tmp/hadoop.tar.gz* && \
#    ln -s /opt/hadoop-$HADOOP_VERSION/etc/hadoop /etc/hadoop

#RUN curl -L -o /opt/hadoop-${HADOOP_VERSION}/share/hadoop/hdfs/hadoop-hdfs-3.1.3.jar  "http://icu-nxrm-1.pok.ibm.com:8081/repository/biloxi/patches/hadoop/3.1.3/hadoop-hdfs-3.1.3.jar" && \
#    curl -L -o /opt/hadoop-${HADOOP_VERSION}/share/hadoop/hdfs/hadoop-hdfs-client-3.1.3.jar "http://icu-nxrm-1.pok.ibm.com:8081/repository/biloxi/patches/hadoop/3.1.3/hadoop-hdfs-client-3.1.3.jar" && \
#    curl -L -o /opt/hadoop-${HADOOP_VERSION}/share/hadoop/hdfs/hadoop-hdfs-httpfs-3.1.3.jar "http://icu-nxrm-1.pok.ibm.com:8081/repository/biloxi/patches/hadoop/3.1.3/hadoop-hdfs-httpfs-3.1.3.jar"

# Install all OS dependencies for notebook server that starts but lacks all
# features (e.g., download as all possible file formats)
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update \
 && apt-get install -yq --no-install-recommends \
    wget \
    bzip2 \
    ca-certificates \
    sudo \
    locales \
    fonts-liberation \
    run-one \
    build-essential \
    vim-tiny \
    git \
    inkscape \
    libsm6 \
    libxext-dev \
    libxrender1 \
    lmodern \
    netcat \
    # ---- nbconvert dependencies ----
    texlive-xetex \
    texlive-fonts-recommended \
    texlive-plain-generic \
    # ----
    tzdata \
    unzip \
    nano-tiny \
    coreutils \
 && apt-get clean && rm -rf /var/lib/apt/lists/*

# Create alternative for nano -> nano-tiny
RUN update-alternatives --install /usr/bin/nano nano /bin/nano-tiny 10

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen

# Configure environment
ENV CONDA_DIR=/opt/conda \
    SHELL=/bin/bash \
    NB_USER=$NB_USER \
    NB_UID=$NB_UID \
    NB_GID=$NB_GID \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8
ENV PATH=$CONDA_DIR/bin:$PATH \
    HOME=/home/$NB_USER

# Copy a script that we will use to correct permissions after running certain commands
COPY fix-permissions /usr/local/bin/fix-permissions
RUN chmod a+rx /usr/local/bin/fix-permissions

# Enable prompt color in the skeleton .bashrc before creating the default NB_USER
RUN sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc

# Create NB_USER wtih name jovyan user with UID=1000 and in the 'users' group
# and make sure these dirs are writable by the `users` group.
RUN echo "auth requisite pam_deny.so" >> /etc/pam.d/su && \
    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \
    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \
    useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \
    mkdir -p $CONDA_DIR && \
    chown $NB_USER:$NB_GID $CONDA_DIR && \
    chmod g+w /etc/passwd && \
    fix-permissions $HOME && \
    fix-permissions $CONDA_DIR

RUN echo "$NB_USER     ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
COPY ssh_config /etc/ssh/ssh_config

USER $NB_UID
WORKDIR $HOME
ARG PYTHON_VERSION=default
RUN ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa && cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys && chmod 0600 ~/.ssh/authorized_keys
RUN whoami

# Setup work directory for backward-compatibility
RUN mkdir /home/$NB_USER/work && \
    fix-permissions /home/$NB_USER

# Install conda as jovyan and check the md5 sum provided on the download site
#ENV MINICONDA_VERSION=4.9.2 \
#    MINICONDA_MD5=b05f6c543ce0c593761bbfb4e6548ff6 \
#    CONDA_VERSION=4.9.2
ENV MINICONDA_VERSION=4.8.2 \
    MINICONDA_MD5=e50662a93f3f5e56ef2d3fdfaf2f8e91 \
    CONDA_VERSION=4.8.2

# Install conda as jovyan
RUN cd /tmp && \
    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-py37_${MINICONDA_VERSION}-Linux-ppc64le.sh && \
    echo "${MINICONDA_MD5} *Miniconda3-py37_${MINICONDA_VERSION}-Linux-ppc64le.sh" | md5sum -c - && \
    /bin/bash Miniconda3-py37_${MINICONDA_VERSION}-Linux-ppc64le.sh -f -b -p $CONDA_DIR && \
    rm -rf Miniconda3-py37_${MINICONDA_VERSION}-Linux-ppc64le.sh && \
    echo "conda ${CONDA_VERSION}" >> $CONDA_DIR/conda-meta/pinned && \
    conda config --system --prepend channels https://public.dhe.ibm.com/ibmdl/export/pub/software/server/ibm-ai/conda/ && \
    conda config --system --prepend channels conda-forge && \
    conda config --system --set auto_update_conda false && \
    conda config --system --set show_channel_urls true && \
    if [ ! $PYTHON_VERSION = 'default' ]; then conda install --yes python=$PYTHON_VERSION; fi && \
    conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' >> $CONDA_DIR/conda-meta/pinned && \
    conda install --quiet --yes conda && \
    conda install --quiet --yes pip && \
    conda update --all --quiet --yes && \
    conda clean --all -f -y && \
    rm -rf /home/$NB_USER/.cache/yarn && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

# Install Jupyter Notebook, Lab, and Hub
# Generate a notebook server config
# Cleanup temporary files
# Correct permissions
# Do all this in a single RUN command to avoid duplicating all of the
# files across image layers when the permissions change
#RUN IBM_POWERAI_LICENSE_ACCEPT=yes conda install --quiet --yes \
#    tensorflow \
#    'notebook=6.3.0' \
#    'jupyterhub=1.3.0' \
#    'jupyterlab=3.0.12' && \
#    conda clean --all -f -y && \
#    npm cache clean --force && \
#    jupyter notebook --generate-config && \
#    rm -rf $CONDA_DIR/share/jupyter/lab/staging && \
#    rm -rf /home/$NB_USER/.cache/yarn && \
#    fix-permissions $CONDA_DIR && \
#    fix-permissions /home/$NB_USER

RUN conda config --prepend channels https://public.dhe.ibm.com/ibmdl/export/pub/software/server/ibm-ai/conda/
RUN conda config --prepend channels https://public.dhe.ibm.com/ibmdl/export/pub/software/server/ibm-ai/conda-early-access/linux-ppc64le/
RUN IBM_POWERAI_LICENSE_ACCEPT=yes conda install --yes jupyter scikit-learn numpy scipy pandas seaborn pyspark=2.4.5 Flask elasticsearch pyarrow python-hdfs tensorflow keras pytz pytorch tensorflow-probability
RUN conda clean --all -f -y && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

EXPOSE 8888

# Configure container startup
ENTRYPOINT ["tini", "-g", "--"]
CMD ["start-notebook.sh"]

# Copy local files as late as possible to avoid cache busting
COPY start.sh start-notebook.sh start-singleuser.sh /usr/local/bin/
COPY jupyter_notebook_config.py /etc/jupyter/

# Fix permissions on /etc/jupyter as root
USER root
RUN fix-permissions /etc/jupyter/

# Switch back to jovyan to avoid accidental container runs as root
USER $NB_UID

# Install Python 3 packages
#RUN conda install --quiet --yes \
#    'beautifulsoup4' \
#    'conda-forge::blas=*=openblas' \
#    'bokeh' \
#    'bottleneck' \
#    'cloudpickle' \
#    'cython' \
#    'dask' \
#    'dill' \
#    'h5py' \
#    'ipywidgets' \
#    'ipympl'\
#    'matplotlib-base' \
#    'numba' \
#    'numexpr' \
#    'pandas' \
#    'pyspark' \
#    'scikit-learn' \
#    'patsy' \
#    'protobuf' \
#    'pytables' \
#    'scikit-image' \
#    'scikit-learn' \
#    'scipy' \
#    'seaborn' \
#    'sqlalchemy' \
#    'statsmodels' \
#    'sympy' \
#    'vincent' \
#    'widgetsnbextension'\
#    'xlrd' && \
#    conda clean --all -f -y && \
#    fix-permissions "${CONDA_DIR}" && \
#    fix-permissions "/home/${NB_USER}"

# Install facets which does not have a pip or conda package at the moment
WORKDIR /tmp
RUN git clone https://github.com/PAIR-code/facets.git && \
    jupyter nbextension install facets/facets-dist/ --sys-prefix && \
    rm -rf /tmp/facets && \
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"

# Import matplotlib the first time to build the font cache.
ENV XDG_CACHE_HOME="/home/${NB_USER}/.cache/"

#RUN conda install --quiet --yes pkg-config && \
#    conda clean --all -f -y && \
#    fix-permissions "${CONDA_DIR}" && \
#    fix-permissions "/home/${NB_USER}"

COPY requirements.ppc64le.txt .
RUN pip install -r requirements.ppc64le.txt
RUN MPLBACKEND=Agg python -c "import matplotlib.pyplot" && \
    fix-permissions "/home/${NB_USER}"

RUN ls -las /tmp
USER $NB_UID
WORKDIR $HOME
COPY digits.ipynb .
